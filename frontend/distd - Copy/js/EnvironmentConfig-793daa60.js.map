{"version":3,"file":"EnvironmentConfig-793daa60.js","sources":["../../src/components/ui/KeyValueInput.vue","../../src/components/ui/PortMappingInput.vue","../../src/components/ui/EnvironmentConfig.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport Btn from './Btn.vue'\nimport Icon from './Icon.vue'\nimport TextField from './TextField.vue'\n\nconst props = defineProps({\n  label: { type: String, default: () => undefined },\n  addLabel: { type: String, default: () => undefined },\n  keyLabel: { type: String, default: () => '' },\n  valueLabel: { type: String, default: () => '' },\n  hint: { type: String, default: () => undefined },\n  error: { type: String, default: () => undefined },\n  modelValue: { type: Object, default: () => {} }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst { t } = useI18n()\n\nconst entries = ref([])\nconst errors = ref({})\n\nonMounted(() => {\n  for (let field in props.modelValue) {\n    entries.value.push({ key: field, value: props.modelValue[field] })\n  }\n})\n\nfunction emitUpdate() {\n  const result = {}\n  entries.value.map(entry => {\n    if (!entry.key) return\n\n    if (!result[entry.key] && result[entry.key] !== '') {\n      result[entry.key] = entry.value\n      errors.value[entry.key] = undefined\n    } else {\n      errors.value[entry.key] = t('errors.DuplicateKey')\n    }\n  })\n\n  emit('update:modelValue', result)\n}\n\nfunction addEntry() {\n  entries.value.push({ key: '', value: '' })\n}\n\nfunction onKeyInput(entry, event) {\n  entry.key = event\n  emitUpdate()\n}\n\nfunction onValueInput(entry, event) {\n  entry.value = event\n  emitUpdate()\n}\n\nfunction removeEntry(item) {\n  entries.value = entries.value.filter(entry => entry !== item)\n  errors.value = {}\n  emitUpdate()\n}\n</script>\n\n<template>\n  <div class=\"key-value-input\">\n    <div v-if=\"label\" class=\"label\" v-text=\"label\" />\n    <div v-if=\"error\" class=\"error\" v-text=\"error\" />\n    <div v-else-if=\"hint\" class=\"hint\" v-text=\"hint\" />\n    <div v-for=\"(entry, index) in entries\" :key=\"index\" class=\"entry\">\n      <div class=\"fields\">\n        <text-field :model-value=\"entry.key\" :error=\"errors[entry.key]\" :label=\"keyLabel\" @update:modelValue=\"onKeyInput(entry, $event)\" />\n        <text-field :model-value=\"entry.value\" :label=\"valueLabel\" @update:modelValue=\"onValueInput(entry, $event)\" />\n      </div>\n      <btn variant=\"icon\" @click=\"removeEntry(entry)\"><icon name=\"remove\" /></btn>\n    </div>\n    <btn variant=\"text\" @click=\"addEntry()\"><icon name=\"plus\" />{{ addLabel || t('common.Add') }}</btn>\n  </div>\n</template>\n","<script setup>\nimport { ref, onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport Btn from './Btn.vue'\nimport Icon from './Icon.vue'\nimport Suggestion from './Suggestion.vue'\nimport TextField from './TextField.vue'\n\nconst props = defineProps({\n  // default to random id as labels need target ids to exist exactly once\n  label: { type: String, default: () => undefined },\n  addLabel: { type: String, default: () => undefined },\n  hint: { type: String, default: () => undefined },\n  error: { type: String, default: () => undefined },\n  modelValue: { type: Array, default: () => [] }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst { t } = useI18n()\n\nconst entries = ref([])\n\nonMounted(() => {\n  for (let k in props.modelValue) {\n    const entry = props.modelValue[k];\n    const [head, protocol] = entry.split('/')\n    const [host, outsidePort, insidePort] = head.split(':')\n    entries.value.push({ host, outsidePort, insidePort, protocol })\n  }\n})\n\nfunction emitUpdate() {\n  const result = []\n  entries\n    .value\n    .filter(entry => entry.host && entry.outsidePort && entry.insidePort && entry.protocol)\n    .map(entry => result.push(`${entry.host}:${entry.outsidePort}:${entry.insidePort}/${entry.protocol}`))\n  emit('update:modelValue', result)\n}\n\nfunction addEntry() {\n  entries.value.push({ host: '0.0.0.0', outsidePort: '', insidePort: '', protocol: 'tcp' })\n  emitUpdate()\n}\n\nfunction onInput(entry, field, event) {\n  entry[field] = event\n  emitUpdate()\n}\n\nfunction removeEntry(item) {\n  entries.value = entries.value.filter(entry => entry !== item)\n  emitUpdate()\n}\n</script>\n\n<template>\n  <div class=\"port-mapping-input\">\n    <div v-if=\"label\" class=\"label\" v-text=\"label\" />\n    <div v-if=\"error\" class=\"error\" v-text=\"error\" />\n    <div v-else-if=\"hint\" class=\"hint\" v-text=\"hint\" />\n    <div v-for=\"(entry, index) in entries\" :key=\"index\" class=\"entry\">\n      <div class=\"fields\">\n        <text-field :model-value=\"entry.host\" :label=\"t('common.Host')\" @update:modelValue=\"onInput(entry, 'host', $event)\" />\n        <text-field :model-value=\"entry.outsidePort\" :label=\"t('env.docker.OutsidePort')\" @update:modelValue=\"onInput(entry, 'outsidePort', $event)\" />\n        <text-field :model-value=\"entry.insidePort\" :label=\"t('env.docker.InsidePort')\" @update:modelValue=\"onInput(entry, 'insidePort', $event)\" />\n        <suggestion :model-value=\"entry.protocol\" :label=\"t('common.Protocol')\" :options=\"['tcp', 'udp']\" @update:modelValue=\"onInput(entry, 'protocol', $event)\" />\n      </div>\n      <btn variant=\"icon\" @click=\"removeEntry(entry)\"><icon name=\"remove\" /></btn>\n    </div>\n    <btn variant=\"text\" @click=\"addEntry()\"><icon name=\"plus\" />{{ addLabel || t('common.Add') }}</btn>\n  </div>\n</template>\n","<script>\nconst fields = {\n  host: [],\n  docker: [\n    {\n      name: 'image',\n      type: 'text',\n      label: 'templates.DockerImage',\n      default: 'pufferpanel/generic'\n    },\n    {\n      name: 'containerRoot',\n      type: 'text',\n      default: ''\n    },\n    {\n      name: 'networkName',\n      type: 'text',\n      options: [\n        'host',\n        'bridge'\n      ],\n      default: 'host'\n    },\n    {\n      name: 'bindings',\n      type: 'map',\n      hint: 'env.docker.BindingsHint',\n      keyLabel: 'env.docker.HostPath',\n      valueLabel: 'env.docker.ContainerPath',\n      default: {}\n    },\n    {\n      name: 'portBindings',\n      type: 'portBindings',\n      label: 'env.docker.portBindings',\n      hint: 'env.docker.PortBindingsHint',\n      default: []\n    }\n  ],\n  // to not throw up when server creation cant select a valid env\n  unsupported: []\n}\n</script>\n\n<script setup>\nimport { onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport KeyValueInput from '@/components/ui/KeyValueInput.vue'\nimport PortMappingInput from '@/components/ui/PortMappingInput.vue'\nimport Suggestion from '@/components/ui/Suggestion.vue'\nimport TextField from '@/components/ui/TextField.vue'\n\nconst props = defineProps({\n  noFieldsMessage: { type: String, default: () => undefined },\n  modelValue: {\n    type: Object,\n    validator: val => fields[val.type] !== undefined,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst { t } = useI18n()\n\nonMounted(() => {\n  const defaults = {}\n  let envType = props.modelValue.type\n  // remap legacy names for the host env\n  if (envType === 'standard' || envType === 'tty') envType = 'host'\n  fields[envType].map(field => {\n    if (!props.modelValue[field.name]) {\n      defaults[field.name] = field.default\n    }\n  })\n  if (Object.keys(defaults).length > 0)\n    emit('update:modelValue', { ...props.modelValue, type: envType, ...defaults })\n})\n\nfunction onInput(field, event) {\n  emit('update:modelValue', { ...props.modelValue, [field]: event })\n}\n\nfunction getLabel(field) {\n  return field.label ? t(field.label) : t(`env.${props.modelValue.type}.${field.name}`)\n}\n</script>\n\n<template>\n  <div class=\"environment-config\">\n    <div v-if=\"noFieldsMessage && fields[modelValue.type].length === 0\" v-text=\"noFieldsMessage\" />\n    <div v-for=\"field in fields[modelValue.type]\" :key=\"field.name\" class=\"field\">\n      <key-value-input v-if=\"field.type === 'map'\" :model-value=\"modelValue[field.name] || field.default\" :label=\"getLabel(field)\" :hint=\"field.hint ? t(field.hint) : undefined\" :key-label=\"t(field.keyLabel)\" :value-label=\"t(field.valueLabel)\" @update:modelValue=\"onInput(field.name, $event)\" />\n      <port-mapping-input v-else-if=\"field.type === 'portBindings'\" :model-value=\"modelValue[field.name] || field.default\" :label=\"getLabel(field)\" :hint=\"field.hint ? t(field.hint) : undefined\" @update:modelValue=\"onInput(field.name, $event)\" />\n      <suggestion v-else-if=\"field.type === 'text' && field.options\" :model-value=\"modelValue[field.name] || field.default\" :label=\"getLabel(field)\" :options=\"field.options\" :hint=\"field.hint ? t(field.hint) : undefined\" @update:modelValue=\"onInput(field.name, $event)\" />\n      <text-field v-else-if=\"field.type === 'text'\" :model-value=\"modelValue[field.name] || field.default\" :label=\"getLabel(field)\" :hint=\"field.hint ? t(field.hint) : undefined\" @update:modelValue=\"onInput(field.name, $event)\" />\n      <span v-else v-text=\"`${field.type} not yet implemented`\" />\n    </div>\n  </div>\n</template>\n"],"names":[],"mappings":"6kCAmBM,CAAE,KAAM,IAER,EAAU,EAAI,IACd,EAAS,EAAI,IAEnB,EAAU,IAAM,CACd,OAAS,KAAS,GAAM,WACtB,EAAQ,MAAM,KAAK,CAAE,IAAK,EAAO,MAAO,EAAM,WAAW,OAI7D,YAAsB,CACpB,KAAM,GAAS,GACf,EAAQ,MAAM,IAAI,GAAS,CACzB,AAAI,CAAC,EAAM,KAEX,CAAI,CAAC,EAAO,EAAM,MAAQ,EAAO,EAAM,OAAS,GAC9C,GAAO,EAAM,KAAO,EAAM,MAC1B,EAAO,MAAM,EAAM,KAAO,QAE1B,EAAO,MAAM,EAAM,KAAO,EAAE,0BAIhC,EAAK,oBAAqB,GAG5B,YAAoB,CAClB,EAAQ,MAAM,KAAK,CAAE,IAAK,GAAI,MAAO,KAGvC,WAAoB,EAAO,EAAO,CAChC,EAAM,IAAM,EACZ,IAGF,WAAsB,EAAO,EAAO,CAClC,EAAM,MAAQ,EACd,IAGF,WAAqB,EAAM,CACzB,EAAQ,MAAQ,EAAQ,MAAM,OAAO,GAAS,IAAU,GACxD,EAAO,MAAQ,GACf,ouCC5CI,CAAE,KAAM,IAER,EAAU,EAAI,IAEpB,EAAU,IAAM,CACd,OAAS,KAAK,GAAM,WAAY,CAC9B,KAAM,GAAQ,EAAM,WAAW,GACzB,CAAC,EAAM,GAAY,EAAM,MAAM,KAC/B,CAAC,EAAM,EAAa,GAAc,EAAK,MAAM,KACnD,EAAQ,MAAM,KAAK,CAAE,OAAM,cAAa,aAAY,gBAIxD,YAAsB,CACpB,KAAM,GAAS,GACf,EACG,MACA,OAAO,GAAS,EAAM,MAAQ,EAAM,aAAe,EAAM,YAAc,EAAM,UAC7E,IAAI,GAAS,EAAO,KAAK,GAAG,EAAM,QAAQ,EAAM,eAAe,EAAM,cAAc,EAAM,aAC5F,EAAK,oBAAqB,GAG5B,YAAoB,CAClB,EAAQ,MAAM,KAAK,CAAE,KAAM,UAAW,YAAa,GAAI,WAAY,GAAI,SAAU,QACjF,IAGF,WAAiB,EAAO,EAAO,EAAO,CACpC,EAAM,GAAS,EACf,IAGF,WAAqB,EAAM,CACzB,EAAQ,MAAQ,EAAQ,MAAM,OAAO,GAAS,IAAU,GACxD,+zCCpDI,EAAS,CACb,KAAM,GACN,OAAQ,CACN,CACE,KAAM,QACN,KAAM,OACN,MAAO,wBACP,QAAS,uBAEX,CACE,KAAM,gBACN,KAAM,OACN,QAAS,IAEX,CACE,KAAM,cACN,KAAM,OACN,QAAS,CACP,OACA,UAEF,QAAS,QAEX,CACE,KAAM,WACN,KAAM,MACN,KAAM,0BACN,SAAU,sBACV,WAAY,2BACZ,QAAS,IAEX,CACE,KAAM,eACN,KAAM,eACN,MAAO,0BACP,KAAM,8BACN,QAAS,KAIb,YAAa,0LAuBT,CAAE,KAAM,IAEd,EAAU,IAAM,CACd,KAAM,GAAW,GACjB,GAAI,GAAU,EAAM,WAAW,KAE/B,AAAI,KAAY,YAAc,IAAY,QAAO,GAAU,QAC3D,EAAO,GAAS,IAAI,GAAS,CAC3B,AAAK,EAAM,WAAW,EAAM,OAC1B,GAAS,EAAM,MAAQ,EAAM,WAG7B,OAAO,KAAK,GAAU,OAAS,GACjC,EAAK,oBAAqB,SAAK,EAAM,YAAX,CAAuB,KAAM,IAAY,MAGvE,WAAiB,EAAO,EAAO,CAC7B,EAAK,oBAAqB,OAAK,EAAM,YAAX,EAAwB,GAAQ,KAG5D,WAAkB,EAAO,CACvB,MAAO,GAAM,MAAQ,EAAE,EAAM,OAAS,EAAE,OAAO,EAAM,WAAW,QAAQ,EAAM"}