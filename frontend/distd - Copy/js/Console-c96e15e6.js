var J=Object.defineProperty,F=Object.defineProperties;var T=Object.getOwnPropertyDescriptors;var h=Object.getOwnPropertySymbols;var j=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var u=(g,I,C)=>I in g?J(g,I,{enumerable:!0,configurable:!0,writable:!0,value:C}):g[I]=C,V=(g,I)=>{for(var C in I||(I={}))j.call(I,C)&&u(g,C,I[C]);if(h)for(var C of h(I))w.call(I,C)&&u(g,C,I[C]);return g},t=(g,I)=>F(g,T(I));import{l as k,k as B,r as Y,p as P,L as f,y as r,o as X,h as n,q as y,t as v,s as x,z as L,A as U,x as o,C as K,I as D}from"./vendor-943aface.js";import{e as N,_ as Q}from"./index-b96ce60d.js";const S="KCgpPT57KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO3ZhciBDPXR5cGVvZiBnbG9iYWxUaGlzIT0idW5kZWZpbmVkIj9nbG9iYWxUaGlzOnR5cGVvZiB3aW5kb3chPSJ1bmRlZmluZWQiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT0idW5kZWZpbmVkIj9nbG9iYWw6dHlwZW9mIHNlbGYhPSJ1bmRlZmluZWQiP3NlbGY6e307ZnVuY3Rpb24gTyhsKXtyZXR1cm4gbCYmbC5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobCwiZGVmYXVsdCIpP2wuZGVmYXVsdDpsfXZhciB2PXt9OyhmdW5jdGlvbihsKXsoZnVuY3Rpb24obyx1KXtpZih0eXBlb2YgbC5ub2RlTmFtZSE9InN0cmluZyIpdShsKTtlbHNle3ZhciBuPXt9O3Uobiksby5BbnNpVXA9bi5kZWZhdWx0fX0pKEMsZnVuY3Rpb24obyl7dmFyIHU9dGhpcyYmdGhpcy5fX21ha2VUZW1wbGF0ZU9iamVjdHx8ZnVuY3Rpb24ocyxlKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5P09iamVjdC5kZWZpbmVQcm9wZXJ0eShzLCJyYXciLHt2YWx1ZTplfSk6cy5yYXc9ZSxzfSxuOyhmdW5jdGlvbihzKXtzW3MuRU9TPTBdPSJFT1MiLHNbcy5UZXh0PTFdPSJUZXh0IixzW3MuSW5jb21wbGV0ZT0yXT0iSW5jb21wbGV0ZSIsc1tzLkVTQz0zXT0iRVNDIixzW3MuVW5rbm93bj00XT0iVW5rbm93biIsc1tzLlNHUj01XT0iU0dSIixzW3MuT1NDVVJMPTZdPSJPU0NVUkwifSkobnx8KG49e30pKTt2YXIgXz1mdW5jdGlvbigpe2Z1bmN0aW9uIHMoKXt0aGlzLlZFUlNJT049IjUuMS4wIix0aGlzLnNldHVwX3BhbGV0dGVzKCksdGhpcy5fdXNlX2NsYXNzZXM9ITEsdGhpcy5ib2xkPSExLHRoaXMuaXRhbGljPSExLHRoaXMudW5kZXJsaW5lPSExLHRoaXMuZmc9dGhpcy5iZz1udWxsLHRoaXMuX2J1ZmZlcj0iIix0aGlzLl91cmxfd2hpdGVsaXN0PXtodHRwOjEsaHR0cHM6MX19cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwidXNlX2NsYXNzZXMiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXNlX2NsYXNzZXN9LHNldDpmdW5jdGlvbihlKXt0aGlzLl91c2VfY2xhc3Nlcz1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSwidXJsX3doaXRlbGlzdCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl91cmxfd2hpdGVsaXN0fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fdXJsX3doaXRlbGlzdD1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLHMucHJvdG90eXBlLnNldHVwX3BhbGV0dGVzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmFuc2lfY29sb3JzPVtbe3JnYjpbMCwwLDBdLGNsYXNzX25hbWU6ImFuc2ktYmxhY2sifSx7cmdiOlsxODcsMCwwXSxjbGFzc19uYW1lOiJhbnNpLXJlZCJ9LHtyZ2I6WzAsMTg3LDBdLGNsYXNzX25hbWU6ImFuc2ktZ3JlZW4ifSx7cmdiOlsxODcsMTg3LDBdLGNsYXNzX25hbWU6ImFuc2kteWVsbG93In0se3JnYjpbMCwwLDE4N10sY2xhc3NfbmFtZToiYW5zaS1ibHVlIn0se3JnYjpbMTg3LDAsMTg3XSxjbGFzc19uYW1lOiJhbnNpLW1hZ2VudGEifSx7cmdiOlswLDE4NywxODddLGNsYXNzX25hbWU6ImFuc2ktY3lhbiJ9LHtyZ2I6WzI1NSwyNTUsMjU1XSxjbGFzc19uYW1lOiJhbnNpLXdoaXRlIn1dLFt7cmdiOls4NSw4NSw4NV0sY2xhc3NfbmFtZToiYW5zaS1icmlnaHQtYmxhY2sifSx7cmdiOlsyNTUsODUsODVdLGNsYXNzX25hbWU6ImFuc2ktYnJpZ2h0LXJlZCJ9LHtyZ2I6WzAsMjU1LDBdLGNsYXNzX25hbWU6ImFuc2ktYnJpZ2h0LWdyZWVuIn0se3JnYjpbMjU1LDI1NSw4NV0sY2xhc3NfbmFtZToiYW5zaS1icmlnaHQteWVsbG93In0se3JnYjpbODUsODUsMjU1XSxjbGFzc19uYW1lOiJhbnNpLWJyaWdodC1ibHVlIn0se3JnYjpbMjU1LDg1LDI1NV0sY2xhc3NfbmFtZToiYW5zaS1icmlnaHQtbWFnZW50YSJ9LHtyZ2I6Wzg1LDI1NSwyNTVdLGNsYXNzX25hbWU6ImFuc2ktYnJpZ2h0LWN5YW4ifSx7cmdiOlsyNTUsMjU1LDI1NV0sY2xhc3NfbmFtZToiYW5zaS1icmlnaHQtd2hpdGUifV1dLHRoaXMucGFsZXR0ZV8yNTY9W10sdGhpcy5hbnNpX2NvbG9ycy5mb3JFYWNoKGZ1bmN0aW9uKHgpe3guZm9yRWFjaChmdW5jdGlvbihtKXtlLnBhbGV0dGVfMjU2LnB1c2gobSl9KX0pO2Zvcih2YXIgdD1bMCw5NSwxMzUsMTc1LDIxNSwyNTVdLHI9MDtyPDY7KytyKWZvcih2YXIgaT0wO2k8NjsrK2kpZm9yKHZhciBhPTA7YTw2OysrYSl7dmFyIGg9e3JnYjpbdFtyXSx0W2ldLHRbYV1dLGNsYXNzX25hbWU6InRydWVjb2xvciJ9O3RoaXMucGFsZXR0ZV8yNTYucHVzaChoKX1mb3IodmFyIGM9OCxnPTA7ZzwyNDsrK2csYys9MTApe3ZhciBkPXtyZ2I6W2MsYyxjXSxjbGFzc19uYW1lOiJ0cnVlY29sb3IifTt0aGlzLnBhbGV0dGVfMjU2LnB1c2goZCl9fSxzLnByb3RvdHlwZS5lc2NhcGVfdHh0X2Zvcl9odG1sPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1smPD4iJ10vZ20sZnVuY3Rpb24odCl7aWYodD09PSImIilyZXR1cm4iJmFtcDsiO2lmKHQ9PT0iPCIpcmV0dXJuIiZsdDsiO2lmKHQ9PT0iPiIpcmV0dXJuIiZndDsiO2lmKHQ9PT0nIicpcmV0dXJuIiZxdW90OyI7aWYodD09PSInIilyZXR1cm4iJiN4Mjc7In0pfSxzLnByb3RvdHlwZS5hcHBlbmRfYnVmZmVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2J1ZmZlcitlO3RoaXMuX2J1ZmZlcj10fSxzLnByb3RvdHlwZS5nZXRfbmV4dF9wYWNrZXQ9ZnVuY3Rpb24oKXt2YXIgZT17a2luZDpuLkVPUyx0ZXh0OiIiLHVybDoiIn0sdD10aGlzLl9idWZmZXIubGVuZ3RoO2lmKHQ9PTApcmV0dXJuIGU7dmFyIHI9dGhpcy5fYnVmZmVyLmluZGV4T2YoIhsiKTtpZihyPT0tMSlyZXR1cm4gZS5raW5kPW4uVGV4dCxlLnRleHQ9dGhpcy5fYnVmZmVyLHRoaXMuX2J1ZmZlcj0iIixlO2lmKHI+MClyZXR1cm4gZS5raW5kPW4uVGV4dCxlLnRleHQ9dGhpcy5fYnVmZmVyLnNsaWNlKDAsciksdGhpcy5fYnVmZmVyPXRoaXMuX2J1ZmZlci5zbGljZShyKSxlO2lmKHI9PTApe2lmKHQ9PTEpcmV0dXJuIGUua2luZD1uLkluY29tcGxldGUsZTt2YXIgaT10aGlzLl9idWZmZXIuY2hhckF0KDEpO2lmKGkhPSJbIiYmaSE9Il0iKXJldHVybiBlLmtpbmQ9bi5FU0MsZS50ZXh0PXRoaXMuX2J1ZmZlci5zbGljZSgwLDEpLHRoaXMuX2J1ZmZlcj10aGlzLl9idWZmZXIuc2xpY2UoMSksZTtpZihpPT0iWyIpe3RoaXMuX2NzaV9yZWdleHx8KHRoaXMuX2NzaV9yZWdleD1iKHUoW2AKICAgICAgICAgICAgICAgICAgICAgICAgXiAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYmVnaW5uaW5nIG9mIGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRmlyc3QgYXR0ZW1wdAogICAgICAgICAgICAgICAgICAgICAgICAoPzogICAgICAgICAgICAgICAgICAgICAgICAgIyBsZWdhbCBzZXF1ZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIBtbICAgICAgICAgICAgICAgICAgICAgICMgQ1NJCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFs8LT9dPykgICAgICAgICAgICAgICMgcHJpdmF0ZS1tb2RlIGNoYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAoW2Q7XSopICAgICAgICAgICAgICAgICAgICAjIGFueSBkaWdpdHMgb3Igc2VtaWNvbG9ucwogICAgICAgICAgICAgICAgICAgICAgICAgIChbIC0vXT8gICAgICAgICAgICAgICAjIGFuIGludGVybWVkaWF0ZSBtb2RpZmllcgogICAgICAgICAgICAgICAgICAgICAgICAgIFtALX5dKSAgICAgICAgICAgICAgICAjIHRoZSBjb21tYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWx0ZXJuYXRlIChzZWNvbmQgYXR0ZW1wdCkKICAgICAgICAgICAgICAgICAgICAgICAgKD86ICAgICAgICAgICAgICAgICAgICAgICAgICMgaWxsZWdhbCBzZXF1ZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIBtbICAgICAgICAgICAgICAgICAgICAgICMgQ1NJCiAgICAgICAgICAgICAgICAgICAgICAgICAgWyAtfl0qICAgICAgICAgICAgICAgICMgYW55dGhpbmcgbGVnYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAoW1wwLR86XSkgICAgICAgICAgICAgICMgYW55dGhpbmcgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgYF0sW2AKICAgICAgICAgICAgICAgICAgICAgICAgXiAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYmVnaW5uaW5nIG9mIGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRmlyc3QgYXR0ZW1wdAogICAgICAgICAgICAgICAgICAgICAgICAoPzogICAgICAgICAgICAgICAgICAgICAgICAgIyBsZWdhbCBzZXF1ZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIFxceDFiXFxbICAgICAgICAgICAgICAgICAgICAgICMgQ1NJCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFtcXHgzYy1cXHgzZl0/KSAgICAgICAgICAgICAgIyBwcml2YXRlLW1vZGUgY2hhcgogICAgICAgICAgICAgICAgICAgICAgICAgIChbXFxkO10qKSAgICAgICAgICAgICAgICAgICAgIyBhbnkgZGlnaXRzIG9yIHNlbWljb2xvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAoW1xceDIwLVxceDJmXT8gICAgICAgICAgICAgICAjIGFuIGludGVybWVkaWF0ZSBtb2RpZmllcgogICAgICAgICAgICAgICAgICAgICAgICAgIFtcXHg0MC1cXHg3ZV0pICAgICAgICAgICAgICAgICMgdGhlIGNvbW1hbmQKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhbHRlcm5hdGUgKHNlY29uZCBhdHRlbXB0KQogICAgICAgICAgICAgICAgICAgICAgICAoPzogICAgICAgICAgICAgICAgICAgICAgICAgIyBpbGxlZ2FsIHNlcXVlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgXFx4MWJcXFsgICAgICAgICAgICAgICAgICAgICAgIyBDU0kKICAgICAgICAgICAgICAgICAgICAgICAgICBbXFx4MjAtXFx4N2VdKiAgICAgICAgICAgICAgICAjIGFueXRoaW5nIGxlZ2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFtcXHgwMC1cXHgxZjpdKSAgICAgICAgICAgICAgIyBhbnl0aGluZyBpbGxlZ2FsCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBgXSkpKTt2YXIgYT10aGlzLl9idWZmZXIubWF0Y2godGhpcy5fY3NpX3JlZ2V4KTtpZihhPT09bnVsbClyZXR1cm4gZS5raW5kPW4uSW5jb21wbGV0ZSxlO2lmKGFbNF0pcmV0dXJuIGUua2luZD1uLkVTQyxlLnRleHQ9dGhpcy5fYnVmZmVyLnNsaWNlKDAsMSksdGhpcy5fYnVmZmVyPXRoaXMuX2J1ZmZlci5zbGljZSgxKSxlO2FbMV0hPSIifHxhWzNdIT0ibSI/ZS5raW5kPW4uVW5rbm93bjplLmtpbmQ9bi5TR1IsZS50ZXh0PWFbMl07dmFyIGg9YVswXS5sZW5ndGg7cmV0dXJuIHRoaXMuX2J1ZmZlcj10aGlzLl9idWZmZXIuc2xpY2UoaCksZX1pZihpPT0iXSIpe2lmKHQ8NClyZXR1cm4gZS5raW5kPW4uSW5jb21wbGV0ZSxlO2lmKHRoaXMuX2J1ZmZlci5jaGFyQXQoMikhPSI4Inx8dGhpcy5fYnVmZmVyLmNoYXJBdCgzKSE9IjsiKXJldHVybiBlLmtpbmQ9bi5FU0MsZS50ZXh0PXRoaXMuX2J1ZmZlci5zbGljZSgwLDEpLHRoaXMuX2J1ZmZlcj10aGlzLl9idWZmZXIuc2xpY2UoMSksZTt0aGlzLl9vc2Nfc3R8fCh0aGlzLl9vc2Nfc3Q9Zih1KFtgCiAgICAgICAgICAgICAgICAgICAgICAgICg/OiAgICAgICAgICAgICAgICAgICAgICAgICAjIGxlZ2FsIHNlcXVlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgKBtcXCkgICAgICAgICAgICAgICAgICAgICMgRVNDICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWx0ZXJuYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFx4MDcpICAgICAgICAgICAgICAgICAgICAgICMgQkVMICh3aGF0IHh0ZXJtIGRpZCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhbHRlcm5hdGUgKHNlY29uZCBhdHRlbXB0KQogICAgICAgICAgICAgICAgICAgICAgICAoICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpbGxlZ2FsIHNlcXVlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgW1wwLQZdICAgICAgICAgICAgICAgICAjIGFueXRoaW5nIGlsbGVnYWwKICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhbHRlcm5hdGUKICAgICAgICAgICAgICAgICAgICAgICAgICBbXGItGl0gICAgICAgICAgICAgICAgICMgYW55dGhpbmcgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgIFscLR9dICAgICAgICAgICAgICAgICAjIGFueXRoaW5nIGlsbGVnYWwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGBdLFtgCiAgICAgICAgICAgICAgICAgICAgICAgICg/OiAgICAgICAgICAgICAgICAgICAgICAgICAjIGxlZ2FsIHNlcXVlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFxceDFiXFxcXCkgICAgICAgICAgICAgICAgICAgICMgRVNDIFxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWx0ZXJuYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgKFxceDA3KSAgICAgICAgICAgICAgICAgICAgICAjIEJFTCAod2hhdCB4dGVybSBkaWQpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWx0ZXJuYXRlIChzZWNvbmQgYXR0ZW1wdCkKICAgICAgICAgICAgICAgICAgICAgICAgKCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWxsZWdhbCBzZXF1ZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIFtcXHgwMC1cXHgwNl0gICAgICAgICAgICAgICAgICMgYW55dGhpbmcgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgIFtcXHgwOC1cXHgxYV0gICAgICAgICAgICAgICAgICMgYW55dGhpbmcgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgIFtcXHgxYy1cXHgxZl0gICAgICAgICAgICAgICAgICMgYW55dGhpbmcgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgYF0pKSksdGhpcy5fb3NjX3N0Lmxhc3RJbmRleD0wO3t2YXIgYz10aGlzLl9vc2Nfc3QuZXhlYyh0aGlzLl9idWZmZXIpO2lmKGM9PT1udWxsKXJldHVybiBlLmtpbmQ9bi5JbmNvbXBsZXRlLGU7aWYoY1szXSlyZXR1cm4gZS5raW5kPW4uRVNDLGUudGV4dD10aGlzLl9idWZmZXIuc2xpY2UoMCwxKSx0aGlzLl9idWZmZXI9dGhpcy5fYnVmZmVyLnNsaWNlKDEpLGV9e3ZhciBnPXRoaXMuX29zY19zdC5leGVjKHRoaXMuX2J1ZmZlcik7aWYoZz09PW51bGwpcmV0dXJuIGUua2luZD1uLkluY29tcGxldGUsZTtpZihnWzNdKXJldHVybiBlLmtpbmQ9bi5FU0MsZS50ZXh0PXRoaXMuX2J1ZmZlci5zbGljZSgwLDEpLHRoaXMuX2J1ZmZlcj10aGlzLl9idWZmZXIuc2xpY2UoMSksZX10aGlzLl9vc2NfcmVnZXh8fCh0aGlzLl9vc2NfcmVnZXg9Yih1KFtgCiAgICAgICAgICAgICAgICAgICAgICAgIF4gICAgICAgICAgICAgICAgICAgICAgICAgICAjIGJlZ2lubmluZyBvZiBsaW5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiAgICAgICAgICAgICAgICAgICAgICAgIBtdODsgICAgICAgICAgICAgICAgICAgICMgT1NDIEh5cGVybGluawogICAgICAgICAgICAgICAgICAgICAgICBbIC06PC1+XSogICAgICAgIyBwYXJhbXMgKGV4Y2x1ZGluZyA7KQogICAgICAgICAgICAgICAgICAgICAgICA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBlbmQgb2YgcGFyYW1zCiAgICAgICAgICAgICAgICAgICAgICAgIChbIS1+XXswLDUxMn0pICAgICAgICAjIFVSTCBjYXB0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgICg/OiAgICAgICAgICAgICAgICAgICAgICAgICAjIFNUCiAgICAgICAgICAgICAgICAgICAgICAgICAgKD86G1xcKSAgICAgICAgICAgICAgICAgICMgRVNDICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWx0ZXJuYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgKD86XHgwNykgICAgICAgICAgICAgICAgICAgICMgQkVMICh3aGF0IHh0ZXJtIGRpZCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAoWyAtfl0rKSAgICAgICAgICAgICAgIyBURVhUIGNhcHR1cmUKICAgICAgICAgICAgICAgICAgICAgICAgG104OzsgICAgICAgICAgICAgICAgICAgIyBPU0MgSHlwZXJsaW5rIEVuZAogICAgICAgICAgICAgICAgICAgICAgICAoPzogICAgICAgICAgICAgICAgICAgICAgICAgIyBTVAogICAgICAgICAgICAgICAgICAgICAgICAgICg/OhtcXCkgICAgICAgICAgICAgICAgICAjIEVTQyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICg/Olx4MDcpICAgICAgICAgICAgICAgICAgICAjIEJFTCAod2hhdCB4dGVybSBkaWQpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBgXSxbYAogICAgICAgICAgICAgICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBiZWdpbm5pbmcgb2YgbGluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICAgICAgICAgICAgICBcXHgxYlxcXTg7ICAgICAgICAgICAgICAgICAgICAjIE9TQyBIeXBlcmxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgW1xceDIwLVxceDNhXFx4M2MtXFx4N2VdKiAgICAgICAjIHBhcmFtcyAoZXhjbHVkaW5nIDspCiAgICAgICAgICAgICAgICAgICAgICAgIDsgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGVuZCBvZiBwYXJhbXMKICAgICAgICAgICAgICAgICAgICAgICAgKFtcXHgyMS1cXHg3ZV17MCw1MTJ9KSAgICAgICAgIyBVUkwgY2FwdHVyZQogICAgICAgICAgICAgICAgICAgICAgICAoPzogICAgICAgICAgICAgICAgICAgICAgICAgIyBTVAogICAgICAgICAgICAgICAgICAgICAgICAgICg/OlxceDFiXFxcXCkgICAgICAgICAgICAgICAgICAjIEVTQyBcXAogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICg/OlxceDA3KSAgICAgICAgICAgICAgICAgICAgIyBCRUwgKHdoYXQgeHRlcm0gZGlkKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIChbXFx4MjAtXFx4N2VdKykgICAgICAgICAgICAgICMgVEVYVCBjYXB0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgIFxceDFiXFxdODs7ICAgICAgICAgICAgICAgICAgICMgT1NDIEh5cGVybGluayBFbmQKICAgICAgICAgICAgICAgICAgICAgICAgKD86ICAgICAgICAgICAgICAgICAgICAgICAgICMgU1QKICAgICAgICAgICAgICAgICAgICAgICAgICAoPzpcXHgxYlxcXFwpICAgICAgICAgICAgICAgICAgIyBFU0MgXFwKICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhbHRlcm5hdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAoPzpcXHgwNykgICAgICAgICAgICAgICAgICAgICMgQkVMICh3aGF0IHh0ZXJtIGRpZCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGBdKSkpO3ZhciBhPXRoaXMuX2J1ZmZlci5tYXRjaCh0aGlzLl9vc2NfcmVnZXgpO2lmKGE9PT1udWxsKXJldHVybiBlLmtpbmQ9bi5FU0MsZS50ZXh0PXRoaXMuX2J1ZmZlci5zbGljZSgwLDEpLHRoaXMuX2J1ZmZlcj10aGlzLl9idWZmZXIuc2xpY2UoMSksZTtlLmtpbmQ9bi5PU0NVUkwsZS51cmw9YVsxXSxlLnRleHQ9YVsyXTt2YXIgaD1hWzBdLmxlbmd0aDtyZXR1cm4gdGhpcy5fYnVmZmVyPXRoaXMuX2J1ZmZlci5zbGljZShoKSxlfX19LHMucHJvdG90eXBlLmFuc2lfdG9faHRtbD1mdW5jdGlvbihlKXt0aGlzLmFwcGVuZF9idWZmZXIoZSk7Zm9yKHZhciB0PVtdOzspe3ZhciByPXRoaXMuZ2V0X25leHRfcGFja2V0KCk7aWYoci5raW5kPT1uLkVPU3x8ci5raW5kPT1uLkluY29tcGxldGUpYnJlYWs7ci5raW5kPT1uLkVTQ3x8ci5raW5kPT1uLlVua25vd258fChyLmtpbmQ9PW4uVGV4dD90LnB1c2godGhpcy50cmFuc2Zvcm1fdG9faHRtbCh0aGlzLndpdGhfc3RhdGUocikpKTpyLmtpbmQ9PW4uU0dSP3RoaXMucHJvY2Vzc19hbnNpKHIpOnIua2luZD09bi5PU0NVUkwmJnQucHVzaCh0aGlzLnByb2Nlc3NfaHlwZXJsaW5rKHIpKSl9cmV0dXJuIHQuam9pbigiIil9LHMucHJvdG90eXBlLndpdGhfc3RhdGU9ZnVuY3Rpb24oZSl7cmV0dXJue2JvbGQ6dGhpcy5ib2xkLGl0YWxpYzp0aGlzLml0YWxpYyx1bmRlcmxpbmU6dGhpcy51bmRlcmxpbmUsZmc6dGhpcy5mZyxiZzp0aGlzLmJnLHRleHQ6ZS50ZXh0fX0scy5wcm90b3R5cGUucHJvY2Vzc19hbnNpPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLnRleHQuc3BsaXQoIjsiKTt0Lmxlbmd0aD4wOyl7dmFyIHI9dC5zaGlmdCgpLGk9cGFyc2VJbnQociwxMCk7aWYoaXNOYU4oaSl8fGk9PT0wKXRoaXMuZmc9dGhpcy5iZz1udWxsLHRoaXMuYm9sZD0hMSx0aGlzLml0YWxpYz0hMSx0aGlzLnVuZGVybGluZT0hMTtlbHNlIGlmKGk9PT0xKXRoaXMuYm9sZD0hMDtlbHNlIGlmKGk9PT0zKXRoaXMuaXRhbGljPSEwO2Vsc2UgaWYoaT09PTQpdGhpcy51bmRlcmxpbmU9ITA7ZWxzZSBpZihpPT09MjIpdGhpcy5ib2xkPSExO2Vsc2UgaWYoaT09PTIzKXRoaXMuaXRhbGljPSExO2Vsc2UgaWYoaT09PTI0KXRoaXMudW5kZXJsaW5lPSExO2Vsc2UgaWYoaT09PTM5KXRoaXMuZmc9bnVsbDtlbHNlIGlmKGk9PT00OSl0aGlzLmJnPW51bGw7ZWxzZSBpZihpPj0zMCYmaTwzOCl0aGlzLmZnPXRoaXMuYW5zaV9jb2xvcnNbMF1baS0zMF07ZWxzZSBpZihpPj00MCYmaTw0OCl0aGlzLmJnPXRoaXMuYW5zaV9jb2xvcnNbMF1baS00MF07ZWxzZSBpZihpPj05MCYmaTw5OCl0aGlzLmZnPXRoaXMuYW5zaV9jb2xvcnNbMV1baS05MF07ZWxzZSBpZihpPj0xMDAmJmk8MTA4KXRoaXMuYmc9dGhpcy5hbnNpX2NvbG9yc1sxXVtpLTEwMF07ZWxzZSBpZigoaT09PTM4fHxpPT09NDgpJiZ0Lmxlbmd0aD4wKXt2YXIgYT1pPT09MzgsaD10LnNoaWZ0KCk7aWYoaD09PSI1IiYmdC5sZW5ndGg+MCl7dmFyIGM9cGFyc2VJbnQodC5zaGlmdCgpLDEwKTtjPj0wJiZjPD0yNTUmJihhP3RoaXMuZmc9dGhpcy5wYWxldHRlXzI1NltjXTp0aGlzLmJnPXRoaXMucGFsZXR0ZV8yNTZbY10pfWlmKGg9PT0iMiImJnQubGVuZ3RoPjIpe3ZhciBnPXBhcnNlSW50KHQuc2hpZnQoKSwxMCksZD1wYXJzZUludCh0LnNoaWZ0KCksMTApLHg9cGFyc2VJbnQodC5zaGlmdCgpLDEwKTtpZihnPj0wJiZnPD0yNTUmJmQ+PTAmJmQ8PTI1NSYmeD49MCYmeDw9MjU1KXt2YXIgbT17cmdiOltnLGQseF0sY2xhc3NfbmFtZToidHJ1ZWNvbG9yIn07YT90aGlzLmZnPW06dGhpcy5iZz1tfX19fX0scy5wcm90b3R5cGUudHJhbnNmb3JtX3RvX2h0bWw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50ZXh0O2lmKHQubGVuZ3RoPT09MHx8KHQ9dGhpcy5lc2NhcGVfdHh0X2Zvcl9odG1sKHQpLCFlLmJvbGQmJiFlLml0YWxpYyYmIWUudW5kZXJsaW5lJiZlLmZnPT09bnVsbCYmZS5iZz09PW51bGwpKXJldHVybiB0O3ZhciByPVtdLGk9W10sYT1lLmZnLGg9ZS5iZztlLmJvbGQmJnIucHVzaCgiZm9udC13ZWlnaHQ6Ym9sZCIpLGUuaXRhbGljJiZyLnB1c2goImZvbnQtc3R5bGU6aXRhbGljIiksZS51bmRlcmxpbmUmJnIucHVzaCgidGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSIpLHRoaXMuX3VzZV9jbGFzc2VzPyhhJiYoYS5jbGFzc19uYW1lIT09InRydWVjb2xvciI/aS5wdXNoKGEuY2xhc3NfbmFtZSsiLWZnIik6ci5wdXNoKCJjb2xvcjpyZ2IoIithLnJnYi5qb2luKCIsIikrIikiKSksaCYmKGguY2xhc3NfbmFtZSE9PSJ0cnVlY29sb3IiP2kucHVzaChoLmNsYXNzX25hbWUrIi1iZyIpOnIucHVzaCgiYmFja2dyb3VuZC1jb2xvcjpyZ2IoIitoLnJnYi5qb2luKCIsIikrIikiKSkpOihhJiZyLnB1c2goImNvbG9yOnJnYigiK2EucmdiLmpvaW4oIiwiKSsiKSIpLGgmJnIucHVzaCgiYmFja2dyb3VuZC1jb2xvcjpyZ2IoIitoLnJnYisiKSIpKTt2YXIgYz0iIixnPSIiO3JldHVybiBpLmxlbmd0aCYmKGM9JyBjbGFzcz0iJytpLmpvaW4oIiAiKSsnIicpLHIubGVuZ3RoJiYoZz0nIHN0eWxlPSInK3Iuam9pbigiOyIpKyciJyksIjxzcGFuIitnK2MrIj4iK3QrIjwvc3Bhbj4ifSxzLnByb3RvdHlwZS5wcm9jZXNzX2h5cGVybGluaz1mdW5jdGlvbihlKXt2YXIgdD1lLnVybC5zcGxpdCgiOiIpO2lmKHQubGVuZ3RoPDF8fCF0aGlzLl91cmxfd2hpdGVsaXN0W3RbMF1dKXJldHVybiIiO3ZhciByPSc8YSBocmVmPSInK3RoaXMuZXNjYXBlX3R4dF9mb3JfaHRtbChlLnVybCkrJyI+Jyt0aGlzLmVzY2FwZV90eHRfZm9yX2h0bWwoZS50ZXh0KSsiPC9hPiI7cmV0dXJuIHJ9LHN9KCk7ZnVuY3Rpb24gYihzKXtmb3IodmFyIGU9W10sdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0LTFdPWFyZ3VtZW50c1t0XTt2YXIgcj1zLnJhd1swXSxpPS9eXHMrfFxzK1xufFxzKiNbXHNcU10qP1xufFxuL2dtLGE9ci5yZXBsYWNlKGksIiIpO3JldHVybiBuZXcgUmVnRXhwKGEpfWZ1bmN0aW9uIGYocyl7Zm9yKHZhciBlPVtdLHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdC0xXT1hcmd1bWVudHNbdF07dmFyIHI9cy5yYXdbMF0saT0vXlxzK3xccytcbnxccyojW1xzXFNdKj9cbnxcbi9nbSxhPXIucmVwbGFjZShpLCIiKTtyZXR1cm4gbmV3IFJlZ0V4cChhLCJnIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD1ffSl9KSh2KTt2YXIgaz1PKHYpO2NvbnN0IHk9bmV3IFRleHREZWNvZGVyKCJ1dGYtOCIpLHc9bmV3IGs7dy5hbnNpX3RvX2h0bWwoIhtbbSIpO2Z1bmN0aW9uIFQobCl7aWYobC5pbmRleE9mKCJcciIpIT09LTEpe2NvbnN0IG89bC5zcGxpdCgiXHIiKTtsZXQgdT1vLnNoaWZ0KCk7cmV0dXJuIG8ubWFwKG49Pnt1PW4rdS5zdWJzdHJpbmcobi5sZW5ndGgpfSksdX1yZXR1cm4gbH1mdW5jdGlvbiBJKGwsbyl7cmV0dXJuIGwudHJpbSgpLmluZGV4T2YoIltEQUVNT05dIik9PT0wP2A8c3BhbiBjbGFzcz0iZGFlbW9uLW1hcmtlciIgZGF0YS1uYW1lPSIke299Ij48L3NwYW4+YCtsLnN1YnN0cmluZyg4KTpsfWZ1bmN0aW9uIFMobCxvKXtyZXR1cm4gSShUKGwpLG8pfWZ1bmN0aW9uIGoobCxvKXtjb25zdCB1PWF0b2Iobyksbj1uZXcgVWludDhBcnJheSh1Lmxlbmd0aCtsLmxlbmd0aCk7Zm9yKGxldCBmPTA7ZjxuLmxlbmd0aDtmKyspZjxsLmxlbmd0aD9uW2ZdPWxbZl06bltmXT11LmNoYXJDb2RlQXQoZi1sLmxlbmd0aCk7bGV0IF89eS5kZWNvZGUobiksYj1uZXcgVWludDhBcnJheSgwKTtpZihfLnNsaWNlKC0xKT09PSJcdUZGRkQiKXtmb3IobGV0IGY9MDtmPDM7ZisrKWlmKHkuZGVjb2RlKG4uc2xpY2UoZi0zKSk9PT0iXHVGRkZEIil7Xz1fLnNsaWNlKDAsLTEpLGI9bi5zbGljZShmLTMpO2JyZWFrfX1yZXR1cm57ZGVjb2RlZDpfLGluY29tcGxldGU6Yn19bGV0IHA9bnVsbCxFPW5ldyBVaW50OEFycmF5KDApO29ubWVzc2FnZT1mdW5jdGlvbihsKXtpZihsLmRhdGEubG9ncy5sZW5ndGg9PT0wKXJldHVybjtjb25zdHtkZWNvZGVkOm8saW5jb21wbGV0ZTp1fT1qKEUsQXJyYXkuaXNBcnJheShsLmRhdGEubG9ncyk/bC5kYXRhLmxvZ3Muam9pbigiIik6bC5kYXRhLmxvZ3MpO0U9dTtsZXQgbj1vLnJlcGxhY2VBbGwoYFxyCmAsYApgKTtjb25zdCBfPW4uZW5kc1dpdGgoYApgKTtuPW4uc3BsaXQoYApgKSxfJiZuLnBvcCgpO2NvbnN0IGI9W107bGV0IGY9bnVsbDtuLm1hcChzPT57cz13LmFuc2lfdG9faHRtbChzKSxwJiYocz1wLmxpbmUrcykscD8oYi5wdXNoKHtvcDoidXBkYXRlIixjb250ZW50OlMocyxsLmRhdGEucGFuZWxOYW1lKX0pLGY9e2xpbmU6c30pOihiLnB1c2goe29wOiJhcHBlbmQiLGNvbnRlbnQ6UyhzLGwuZGF0YS5wYW5lbE5hbWUpfSksZj17bGluZTpzfSl9KSxwb3N0TWVzc2FnZShiKSxfP3A9bnVsbDpwPWZ9fSkoKTt9KSgpOwo=",z=typeof window!="undefined"&&window.Blob&&new Blob([atob(S)],{type:"text/javascript;charset=utf-8"});function O(){const g=z&&(window.URL||window.webkitURL).createObjectURL(z);try{return g?new Worker(g):new Worker("data:application/javascript;base64,"+S,{type:"module"})}finally{g&&(window.URL||window.webkitURL).revokeObjectURL(g)}}const E=["textContent"],q={key:1,dir:"ltr",class:"console-wrapper"},$={key:2,dir:"ltr",class:"command"},AI={props:{server:{type:Object,required:!0}},setup(g){const I=g,C=new O;let d=null;const{t:W}=k(),H=B("config").branding.name,m=Y(""),c=Y(null);let i=0,G=null,s=null;P(async()=>{C.addEventListener("message",R),G=I.server.on("console",a),a(await I.server.getConsole()),s=I.server.startTask(async()=>{I.server.needsPolling()&&I.server.hasScope("server.console")&&a(await I.server.getConsole(i))},5e3)}),f(()=>{G&&G(),s&&I.server.stopTask(s),p()});function a(b){"epoch"in b?i=b.epoch:i=Date.now(),C.postMessage(t(V({},b),{panelName:H}))}function R(b){const A=[];if(b.data.map(l=>{if(l.op==="update"&&d)d.innerHTML=l.content;else{const Z=document.createElement("div");Z.innerHTML=l.content,A.push(Z),d=Z}}),A+c.value.children.length>1200){let l=c.value.children.concat(A);l=l.slice(l.length-1e3,l.length),c.value.replaceChildren(l)}else c.value.append(...A)}function p(){c.value&&c.value.replaceChildren([])}function e(){I.server.sendCommand(m.value),m.value=""}return(b,A)=>{const l=r("hotkey");return X(),n("div",null,[y("h2",{textContent:v(x(W)("servers.Console"))},null,8,E),g.server.hasScope("server.console")?L((X(),U(N,{key:0,name:"clear-console",onClick:A[0]||(A[0]=Z=>p())},null,512)),[[l,"c x"]]):o("",!0),g.server.hasScope("server.console")?(X(),n("div",q,[y("div",{ref:(Z,M)=>{M.console=Z,c.value=Z},class:"console"},null,512)])):o("",!0),g.server.hasScope("server.console.send")?(X(),n("div",$,[L(K(Q,{modelValue:m.value,"onUpdate:modelValue":A[1]||(A[1]=Z=>m.value=Z),label:x(W)("servers.Command"),onKeyup:A[2]||(A[2]=D(Z=>e(),["enter"]))},null,8,["modelValue","label"]),[[l,"c c"]]),K(N,{name:"send",onClick:A[3]||(A[3]=Z=>e())})])):o("",!0)])}}};export{AI as default};
//# sourceMappingURL=Console-c96e15e6.js.map
