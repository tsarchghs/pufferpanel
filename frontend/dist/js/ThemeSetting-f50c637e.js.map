{"version":3,"file":"ThemeSetting-f50c637e.js","sources":["../../src/components/ui/ThemeSetting.vue"],"sourcesContent":["<script setup>\nimport { useI18n } from 'vue-i18n'\nimport Dropdown from './Dropdown.vue'\n\nconst props = defineProps({\n  modelValue: { type: Object, required: true }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst { t, locale, fallbackLocale } = useI18n()\n\nfunction onInput(event) {\n  emit('update:modelValue', { ...props.modelValue, current: event })\n}\n\nfunction onNativeInput(event) {\n  emit('update:modelValue', { ...props.modelValue, current: event.target.value })\n}\n\nfunction getSettingLabel(setting) {\n  const fallback = setting.label || undefined\n  if (setting.tkey) {\n    return t(setting.tkey, fallback)\n  } else if (setting.tlabels) {\n    return setting.tlabels[locale.value] || setting.tlabels[fallbackLocale.value] || fallback\n  } else {\n    return fallback\n  }\n}\n\nfunction withNormalizedLabels(options) {\n  return options.map(option => {\n    return { ...option, label: getSettingLabel(option) }\n  })\n}\n</script>\n\n<template>\n  <div class=\"theme-setting-wrapper\">\n    <dropdown v-if=\"modelValue.type === 'class'\" :model-value=\"modelValue.current\" :options=\"withNormalizedLabels(modelValue.options)\" :label=\"getSettingLabel(modelValue)\" @update:modelValue=\"onInput($event)\" />\n    <label v-if=\"modelValue.type === 'color'\" class=\"color-input\">\n      <span class=\"label\"><span v-text=\"getSettingLabel(modelValue)\" /></span>\n      <input type=\"color\" :value=\"modelValue.current\" @input=\"onNativeInput\" />\n    </label>\n  </div>\n</template>\n"],"names":[],"mappings":"ywBAUM,CAAE,IAAG,SAAQ,kBAAmB,IAEtC,WAAiB,EAAO,CACtB,EAAK,oBAAqB,OAAK,EAAM,YAAX,CAAuB,QAAS,KAG5D,WAAuB,EAAO,CAC5B,EAAK,oBAAqB,OAAK,EAAM,YAAX,CAAuB,QAAS,EAAM,OAAO,SAGzE,WAAyB,EAAS,CAChC,KAAM,GAAW,EAAQ,OAAS,OAClC,MAAI,GAAQ,KACH,EAAE,EAAQ,KAAM,GACd,EAAQ,SACV,GAAQ,QAAQ,EAAO,QAAU,EAAQ,QAAQ,EAAe,SAAU,EAMrF,WAA8B,EAAS,CACrC,MAAO,GAAQ,IAAI,GACV,OAAK,GAAL,CAAa,MAAO,EAAgB"}